from sklearn.feature_extraction.text import TfidfVectorizer

# Sample documents
Documents = [ 
    "Some nigga wanted to eat a Burger",
    "He went to a food street",
    "He couldn't find anything suitable for him to eat",
    "At the End, he came to know the reason of starvation",
    "It was actually his delusion",
    "He was just wandering in a laundry shop"
]

# Initializing an object
info = TfidfVectorizer()

# fetching the TF-IDF scores for corresponding words
realInfo = info.fit_transform(Documents)

# unique terms
terms = info.get_feature_names_out()

# Converting the TF-IDF scores to an array for better readability
realInfo = realInfo.toarray()

# Create a list of dictionaries to store TF-IDF scores for each document
tfidf_dicts = []

#########################################################################################################################################################
#########################################################################################################################################################
#########################################################################################################################################################
#########################################################################################################################################################
#########################################################################################################################################################
for doc_idx, doc in enumerate(realInfo):                                                            #####################################################
    tfidf_dict = {terms[term_idx]: score for term_idx, score in enumerate(doc)}                     #####################################################
    tfidf_dicts.append(tfidf_dict)                                                                  #####################################################
                                                                                                    #####################################################
# Print the unique terms                                                                            #####################################################
print("The Unique Terms :\n", terms)                                                                #####################################################
                                                                                                    #####################################################
# Print the TF-IDF scores for each term in each document                                            #####################################################
for doc_idx, tfidf_dict in enumerate(tfidf_dicts):                                                  #####################################################
    print(f"\nDocument {doc_idx + 1} TF-IDF scores:")                                               #####################################################
    for term, score in tfidf_dict.items():                                                          #####################################################
        print(f"{term}: {score:.4f}")                                                               #####################################################
#########################################################################################################################################################
#########################################################################################################################################################
#########################################################################################################################################################
#########################################################################################################################################################
#########################################################################################################################################################

